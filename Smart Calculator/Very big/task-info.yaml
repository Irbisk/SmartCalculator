type: edu
custom_name: stage8
files:
- name: src/calculator/Main.java
  visible: true
  text: |
    package calculator;

    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            // put your code here
        }
    }
  learner_created: false
- name: test/Test.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.Arrays;
    import java.util.List;

    public class Test extends StageTest<String> {
        @Override
        public List<TestCase<String>> generate() {
            return Arrays.asList(
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // tests of functionality of previous steps
                        main.start();

                        // test of /help
                        String output = main.execute("/help").trim();
                        if (output.length() < 4) {
                            return CheckResult.wrong("It seems like there was no any \"help\" message.");
                        }

                        // input empty string
                        output = main.execute("");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Incorrect response to an empty string. " +
                                    "The program should not print anything.");
                        }

                        // testing basic assignment
                        output = main.execute("n = 32");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33 + 20 + 11 + 49 - 32 - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute("33 + 20 + 11 + 49 - n - 9 + 1 - 80 + 4").trim();
                        if (!output.equals("-3")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }


                        output = main.execute("c = n \nc = 2");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c  ").trim();
                        if (!output.equals("2")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11 - 13 + c").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5 --- 2 ++++++ 4 -- 2 ---- 1").trim();
                        if (!output.equals("10")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // test of a nonexistent command
                        output = main.execute("/start").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should print \"Unknown command\" " +
                                    "when a nonexistent command is entered.");
                        }

                        // testing invalid variable name
                        output = main.execute("var1 = 1").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The name of variable should contain only Latin letters.");
                        }

                        // testing invalid value
                        output = main.execute("var = 2a").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The value can be an integer number or a value of another variable");
                        }

                        // testing multiple equalization
                        output = main.execute("c = 7 - 1 = 5").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle a invalid assignment.");
                        }

                        // testing assignment by unassigned variable
                        output = main.execute("variable = f").trim().toLowerCase();
                        if (!(output.startsWith("unknown") || output.startsWith("invalid"))) {
                            return CheckResult.wrong("The program should not allow an assignment by unassigned variable.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // checking case sensitivity
                        main.execute("variable = 777");
                        output = main.execute("Variable").trim().toLowerCase();
                        if (!output.startsWith("unknown")) {
                            return CheckResult.wrong("The program should be case sensitive.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // A test suit for multiplication and division
                        main.start();

                        String output = main.execute("4 * 3").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program has problems with multiplication operation.");
                        }

                        output = main.execute("91 / 13").trim();
                        if (!output.equals("7")) {
                            return CheckResult.wrong("The program has problems with division operation.");
                        }

                        // testing all operators
                        main.execute(" a= 7 \n b =2");
                        output = main.execute("a * 4 / b - (3 - 1)").trim();
                        if (!output.equals("12")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // testing priority of parentheses
                        main.start();

                        // expression from the example
                        String output = main.execute("7 + 3 * ((4 + 3) * 7 + 1) - 6 / (2 + 1)").trim();
                        if (!output.equals("155")) {
                            return CheckResult.wrong("The program cannot reproduce an example from the task.");
                        }

    //                    // test case with a big amount of brackets
    //                    output = main.execute("3 + (9 + ( 68 * 3/9)) * ((7-2 * 5) / 2) * 6").trim();
    //                    if (!output.equals("-282")) {
    //                        return CheckResult.wrong("Program incorrectly solves expressions with multi-level parentheses");
    //                    }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // a set of negative tests
                        main.start();

                        // tests with unclosed brackets
                        String output = main.execute("8 * (2 + 3").trim().toLowerCase();
                        String output1 = main.execute("4 + 5)").trim().toLowerCase();
                        if (!output.startsWith("invalid") || !output1.startsWith("invalid")) {
                            return CheckResult.wrong("The program could not handle an invalid expression.");
                        }

                        // sequence of * test
                        output = main.execute("2 ************ 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"*\" should return \"Invalid expression\".");
                        }

                        // sequence of / test
                        output = main.execute("2 // 2").trim().toLowerCase();
                        if (!output.startsWith("invalid")) {
                            return CheckResult.wrong("A sequence of \"/\" should return \"Invalid expression\".");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    }),
                    new TestCase<String>().setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();

                        // test suit for the 8th stage with very large numbers
                        main.start();

                        // testing basic assignment
                        String output = main.execute("n = 32000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // testing a big amount of numbers
                        output = main.execute("33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - 32000000000000000000 - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong("The program cannot process addition and subtraction operations correctly.");
                        }

                        // the same with a variable
                        output = main.execute(
                            "33000000000000000000 + 20000000000000000000 + 11000000000000000000 + " +
                                "49000000000000000000 - n - 9000000000000000000 " +
                                "+ 1000000000000000000 - 80000000000000000000 + 4000000000000000000 + 1").trim();
                        if (!output.equals("-2999999999999999999")) {
                            return CheckResult.wrong(
                                "The program cannot process addition " +
                                    "and subtraction operations correctly.");
                        }

                        // testing reassignment with big values
                        output = main.execute("c = n \nc = 2000000000000000000000");
                        if (output.length() != 0) {
                            return CheckResult.wrong("Unexpected reaction after assignment." +
                                    "The program should not print anything in this case.");
                        }

                        // check value
                        output = main.execute("  c   ").trim();
                        if (!output.equals("2000000000000000000000")) {
                            return CheckResult.wrong("The variable stores not a correct value." +
                                    "May be the program could not assign the value of one variable to another one.");
                        }

                        // the sum of the numbers is zero
                        output = main.execute("11000000000000000000 - 9000000000000000000 - " +
                                "c + 1998000000000000000000").trim();
                        if (!output.equals("0")) {
                            return CheckResult.wrong("The problem when sum is equal to 0 has occurred.");
                        }

                        // test of multiple operations
                        output = main.execute("5000000000000000000 --- 2000000000000000000 " +
                                "++++++ 4000000000000000000 -- 2000000000000000000 ---- 1000000000000000000").trim();
                        if (!output.equals("10000000000000000000")) {
                            return CheckResult.wrong("The program cannot process multiple operations with several operators.");
                        }

                        // testing all operators, with variables
                        main.execute(" a= 7000000000000000000 \n b =2000000000000000000");
                        output = main.execute("a * 4000000000000000000 / " +
                                "b - (3000000000000000000 - 1000000000000000000)").trim();
                        if (!output.equals("12000000000000000000")) {
                            return CheckResult.wrong("The program cannot correctly process several operations.");
                        }

                        // test of /exit
                        output = main.execute("/exit").trim().toLowerCase();
                        if (!output.startsWith("bye")) {
                            return CheckResult.wrong("Your program didn't print \"bye\" after entering \"/exit\".");
                        }

                        return new CheckResult(main.isFinished(), "Your program should exit after entering \"/exit\".");
                    })

            );
        }
    }
  learner_created: false
- name: src/calculator/Program.java
  visible: true
  text: |
    package calculator;

    import java.math.BigInteger;
    import java.util.*;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class Program {
        private Scanner scanner = new Scanner(System.in);
        private Map<String, Integer> map = new HashMap<>();


        public void start2() {

        }

        public void start() {
            while (true) {
                String line = scanner.nextLine();
                Pattern pattern = Pattern.compile("/[A-Za-z]+");
                Matcher matcher = pattern.matcher(line);
                if (matcher.find()) {
                    if (line.equals("/exit")) {
                        System.out.println("Bye!");
                        break;
                    } else if (line.equals("/help")) {
                        System.out.println("The program calculates the sum and subtraction of numbers");
                    } else {
                        System.out.println("Unknown command");
                        continue;
                    }
                }

                if (line.contains("=")) {
                    String[] array = line.split("=");
                    if (array.length > 2) {
                        System.out.println("Invalid assignment");
                        continue;
                    }
                    array[0] = array[0].replaceAll("\\s", "");
                    array[1] = array[1].replaceAll("\\s", "");
                    if (!array[0].matches("[A-Za-z]+")) {
                        System.out.println("Invalid identifier");
                        continue;
                    }
                    if (array[1].matches("-*\\d+")) {
                        map.put(array[0], Integer.valueOf(array[1]));
                        continue;
                    } else if (array[1].matches("[A-Za-z]+")) {
                        if (map.containsKey(array[1])) {
                            map.put(array[0], Integer.valueOf(map.get(array[1])));
                        } else {
                            System.out.println("Unknown variable");
                            continue;
                        }
                    } else {
                        System.out.println("Invalid assignment");
                        continue;
                    }

                    continue;
                }


                if (line.matches("[A-Za-z]+\\s*")) {
                    if (map.containsKey(line)) {
                        System.out.println(map.get(line));
                        continue;
                    } else {
                        System.out.println("Unknown variable");
                        continue;
                    }
                }

                if (line.contains("(") || line.contains(")")) {
                    int count = 0;
                    String[] array = line.split("");

                    for (int i = 0; i < array.length; i++) {
                        if (array[i].equals("(")) {
                            count++;
                        }
                        if (array[i].equals(")")) {
                            count--;
                        }
                    }
                    if (count != 0) {
                        System.out.println("Invalid expression");
                        continue;
                    }
                }

                if (line.matches(".*\\*{2,}.*") || line.matches(".*/{2,}.*")) {
                    System.out.println("Invalid expression");
                    continue;
                }

                if (!line.isEmpty()) {
                    makeStack(line);
                }
                /*


                if (!line.isEmpty()) {
                    Scanner lineScanner = new Scanner(line);
                    int result = 0;
                    String operand = "";
                    boolean first = true;
                    boolean completed = true;
                    while (lineScanner.hasNext()) {
                        String enter = lineScanner.next();
                        if (enter.matches("[+-]?\\d+")) {
                            int value = Integer.valueOf(enter);

                            if (first) {
                                result += value;
                                first = false;
                                continue;
                            }

                            switch (operand) {
                                case "+":
                                    result += value;
                                    operand = "";
                                    break;
                                case "-":
                                    result -= value;
                                    operand = "";
                                    break;
                                default:
                                    System.out.println("Invalid expression");
                                    completed = false;
                            }
                        } else if (enter.matches("[+-]+")){
                            if (enter.contains("+")) {
                                operand = "+";
                            } else if (enter.contains("-")) {
                                if (enter.length() % 2 == 0) {
                                    operand = "+";
                                } else {
                                    operand = "-";
                                }
                            }
                        } else if (enter.matches("[A-Za-z]+")) {
                            if (map.containsKey(enter)) {
                                int value = map.get(enter);
                                if (first) {
                                    result += value;
                                    first = false;
                                    continue;
                                }
                                switch (operand) {
                                    case "+":
                                        result += value;
                                        operand = "";
                                        break;
                                    case "-":
                                        result -= value;
                                        operand = "";
                                        break;
                                    default:
                                        System.out.println("Invalid expression");
                                        completed = false;
                                }
                            }
                        } else {
                            System.out.println("Invalid expression");
                            completed = false;
                            break;
                        }
                    }
                    if (completed) {
                        System.out.println(result);

                    }
                }
                 */
            }
        }

        public void makeStack(String line) {
            Deque<String> deque = new ArrayDeque<>();
            String entering = line.replaceAll(" ", "");
            String regex = String.format("(?<=%1$s)|(?=%1$s)", "[ \\-\\+\\*/\\(\\)\\^]");
            Pattern pattern = Pattern.compile("\\-{2}");
            Pattern pattern1 = Pattern.compile("\\+{2}");
            Pattern pattern2 = Pattern.compile("\\+-|\\-\\+");
            Matcher matcher = pattern.matcher(entering);
            Matcher matcher1 = pattern1.matcher(entering);
            Matcher matcher2 = pattern2.matcher(entering);

            while (matcher.find() || matcher1.find() || matcher2.find()) {
                entering = entering.replaceAll("\\-{2}", "+");
                entering = entering.replaceAll("\\+{2}", "+");
                entering = entering.replaceAll("\\+-|\\-\\+", "-");
            }
            String result = "";
            String[] array = entering.split(regex);

            for (int i = 0; i < array.length; i++) {
                if (array[i].matches("[\\d]+")) {
                    result += array[i] + " ";
                } else if (array[i].matches("[A-Za-z]+")) {
                    if (map.containsKey(array[i])) {
                        result += map.get(array[i]) + " ";
                    } else {
                        System.out.println("Invalid expression");
                        return;
                    }
                } else if (array[i].matches("[ \\-\\+\\*/\\(\\)\\^]")) {
                    if ((i == 0 && array[i].equals("-")) || (array[i].equals("-") && array[i - 1].equals("("))) {
                        result += array[i];
                    } else if (array[i].equals("(")) {
                        deque.push(array[i]);
                    } else if (array[i].equals(")")) {
                        while (!deque.peek().equals("(") && deque.size() > 0) {
                            result += deque.poll() + " ";
                        }
                        deque.poll();
                    } else if (deque.isEmpty() ||(deque.size() > 0 && deque.peek().equals("("))) {
                        deque.push(array[i]);
                    } else if (deque.size() > 0 && (priority(deque.peek()) < priority(array[i]))) {
                        deque.push(array[i]);
                    } else {
                        while (deque.size() > 0 && (priority(deque.peek()) >= priority(array[i]))) {
                            result += deque.poll() + " ";
                        }
                        deque.push(array[i]);
                    }
                }
            }
            while (!deque.isEmpty()) {
                result += deque.poll() + " ";
            }
            calculate(result);

        }

        private void calculate(String postFix) {
            Deque<String> deque = new ArrayDeque<>();
            String[] array = postFix.split(" ");
            for (int i = 0; i < array.length; i++) {
                if (array[i].matches("-*\\d+")) {
                    deque.push(array[i]);
                } else {
                    BigInteger action = procedures(deque.poll(), deque.poll(), array[i]);
                    deque.push(String.valueOf(action));
                }
            }
            System.out.println(deque.peek());
        }

        private BigInteger procedures(String a, String b, String operation) {
            switch (operation) {
                case "+":
                    return new BigInteger(b).add(new BigInteger(a));
                case "-":
                    return new BigInteger(b).subtract(new BigInteger(a));
                case "*":
                    return new BigInteger(b).multiply(new BigInteger(a));
                case "/":
                    return new BigInteger(b).divide(new BigInteger(a));
                case "^":
                    return new BigInteger(b).pow(Integer.valueOf(a));
                default:
                    return null;
            }
        }


        private int priority(String a) {
            if (a == null) {
                return 0;
            } else if (a.equals("^")) {
                return 4;
            } else if (a.equals("*") || (a.equals("/"))) {
                return 3;
            } else if (a.equals("+") || a.equals("-")) {
                return 2;
            } else if (a.equals("(") || a.equals(")")) {
                return 1;
            } else {
                return 0;
            }
        }

    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5323#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 03 Feb 2022 12:18:05 UTC
record: -1
